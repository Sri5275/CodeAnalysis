trigger:
- master  # This pipeline will run whenever there are changes to the master branch.
steps:
- task: PowerShell@2
  displayName: 'GET Request'
  inputs: 
    targetType: inline
    script: |
        $uri = "https://codeanalysis.azurewebsites.net/CodeAnalysis/GetName"
        $response = Invoke-RestMethod -Uri $uri -Method Get
        echo $response     

- powershell: |
    # Read the content of the file from the local directory
    $filePath = "$(Build.SourcesDirectory)\UnitTestDemo.cs"
    $fileContent = Get-Content $filePath -Raw

    # Send POST request to the API endpoint
    $uri = "https://codeanalysis.azurewebsites.net/CodeAnalysis/CodeCheck"
    $response = Invoke-RestMethod -Uri $uri -Method Post -ContentType "text/plain" -Body $fileContent

    # Save the response as a test report file
    $response | Out-File "$(Build.ArtifactStagingDirectory)\test_report.txt"

    # Evaluate the score based on the content of the test report
    $score = 0
    if ($response -match "The code contains the method 'isNithish'.") {
        $score += 1
    }
    if ($response -match "The code follows the naming convention.") {
        $score += 1
    }
    if ($response -match "The code does not contain unnecessary using directives.") {
        $score += 1
    }

    # Determine whether the pipeline should pass based on the score
    if ($score -ge 2) {
        Write-Host "Evaluation report indicates PASS criteria with a score of $score. Pipeline passed."
        Write-Host "##vso[task.setvariable variable=TestResult;]Pass"
    }
    else {
        Write-Host "Evaluation report indicates FAIL criteria with a score of $score. Pipeline failed."
        Write-Host "##vso[task.setvariable variable=TestResult;]Fail"
    }
  displayName: 'TEST CODE'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/test_report.txt'
    artifact: 'TestReport'

- script: |
    if ("$(TestResult)" -eq "Fail") {
        exit 1
    }
  displayName: 'Set Pipeline Result Based on Test Report'
  condition: succeeded()
- task: PowerShell@2
  displayName: 'Send POST Request'
  inputs:
    targetType: inline
    script: |
        # Define the URL for the POST request
        $uri = "https://codeanalysis.azurewebsites.net/CodeAnalysis/Post?age=29&name=nithih"

        # Define the JSON payload to send in the request body
        $jsonPayload = @{
            age = "34"
            name = "Navtish "
            # Add more key-value pairs as needed for your API
        } | ConvertTo-Json

        # Send the POST request with the JSON payload
        try {
            $response = Invoke-RestMethod -Uri $uri -Method Post -ContentType 'application/json' -Body $jsonPayload

            # Output the response from the API
            echo $response
        } catch {
            # Handle any exceptions that occur during the API request
            Write-Error "Failed to send POST request: $_"
            exit 1  # Fail the task if the request fails
        }