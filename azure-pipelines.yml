trigger:
- master  # This pipeline will run whenever there are changes to the master branch.
steps:
- task: PowerShell@2
  displayName: 'GET Request'
  inputs: 
    targetType: inline
    script: |
      $uri = "https://raw.githubusercontent.com/Thoparam-sai-nithish/DevOps/master/DevOpsTests/UnitTestDemoTests.cs"
      $fileContent = Invoke-RestMethod -Uri $uri -Method Get
      $yamlContent = @"
      code: |
        $fileContent
      "@
      $yamlContent | Out-File -FilePath "$(System.DefaultWorkingDirectory)/file.json" -Encoding utf8

- task: PowerShell@2
  displayName: 'POST Request'
  inputs:
    targetType: inline
    script: |
      $uri = "https://codeanalysis.azurewebsites.net/CodeAnalysis/CheckCode"
      $jsonFilePath = "$(System.DefaultWorkingDirectory)/file.json"
      $jsonContent = Get-Content -Path $jsonFilePath -Raw | ConvertFrom-Json
      $response = Invoke-RestMethod -Uri $uri -Method Post -ContentType "application/json" -Body $jsonContent
      echo $response





# - task: PowerShell@2
#   displayName: 'Code download'
#   inputs:
#     targetType: inline
#     script: |
#       # DownLoad The file content from github
#       $fileUrl = 'https://raw.githubusercontent.com/Thoparam-sai-nithish/DevOps/master/DevOpsTests/UnitTestDemoTests.cs'
#       $destination = './downloaded_file.cs'
#       Invoke-WebRequest -Uri $fileUrl -OutFile $destination
#       $fileContent = Get-Content -Path $destination -Raw

#       # Prepare JSON payload
#       $jsonPayload = @{
#         code = $fileContent
#       }
#       Write-Host "Downloaded file content: $jsonPayload"

      # Analyse the code
      # $uri = "https://codeanalysis.azurewebsites.net/CodeAnalysis/CheckCode "
      # $response = Invoke-RestMethod -Uri $uri -Method Post -ContentType 'application/json' -Body $jsonPayload
      # Write-Host "Response: $response"


      # Save the response as a test report file
      # $response | Out-File "$(Build.ArtifactStagingDirectory)\test_report.txt"

      # Evaluate the score based on the content of the test report
      # $score = 0
      # if ($response -match "The code contains the method 'isNithish'.") {
      #     $score += 1
      # }
      # if ($response -match "The code follows the naming convention.") {
      #     $score += 1
      # }
      # if ($response -match "The code does not contain unnecessary using directives.") {
      #     $score += 1
      # }

      # Determine whether the pipeline should pass based on the score
      # if ($score -ge 2) {
      #     Write-Host "Evaluation report indicates PASS criteria with a score of $score. Pipeline passed."
      #     Write-Host "##vso[task.setvariable variable=TestResult;]Pass"
      # }
      # else {
      #     Write-Host "Evaluation report indicates FAIL criteria with a score of $score. Pipeline failed."
      #     Write-Host "##vso[task.setvariable variable=TestResult;]Fail"
      # }

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/test_report.txt'
    artifact: 'TestReport'

- script: |
    if ("$(TestResult)" -eq "Fail") {
        exit 1
    }
  displayName: 'Set Pipeline Result Based on Test Report'
  condition: succeeded()



- task: PowerShell@2
  displayName: 'Send POST Request'
  inputs:
    targetType: inline
    script: |
        # Define the URL for the POST request
        $uri = "https://codeanalysis.azurewebsites.net/CodeAnalysis/Post?age=29&name=nithih"

        # Define the JSON payload to send in the request body
        $jsonPayload = @{
            age = "34"
            name = "Nithish "
            # Add more key-value pairs as needed for your API
        } | ConvertTo-Json

        # Send the POST request with the JSON payload
        try {
            $response = Invoke-RestMethod -Uri $uri -Method Post -ContentType 'application/json' -Body $jsonPayload

            # Output the response from the API
            echo $response
        } catch {
            # Handle any exceptions that occur during the API request
            Write-Error "Failed to send POST request: $_"
            exit 1  # Fail the task if the request fails
        }